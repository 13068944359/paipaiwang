<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:task="http://www.springframework.org/schema/task" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.0.xsd  
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

	
	<!-- 加载数据库配置文件 -->
	<context:property-placeholder file-encoding="UTF-8" location="classpath:jdbc.properties" />
	
	
	<!-- 数据库连接池 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="maxActive" value="10" />
		<property name="minIdle" value="5" />
	</bean>
	
	
	<!-- 配置session工厂 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:myBatis-config.xml" />
		<!--配置扫描式加载SQL映射文件,记得去掉mybatis-config配置-->
		<property name="mapperLocations" value="classpath:com/paipaiwang/mapper/*.xml"/>
	</bean>
	
	<!-- 配置事务管理器,管理数据源事务处理-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 配置事务通知 -->
	<tx:advice id="advice" transaction-manager="transactionManager" >
		<tx:attributes>
			<!-- 默认只处理运行时异常，可加rollback-for="Exception/Throwable"等处理所有异常或包括错误 -->
			<!-- 运行时异常就是不用捕获的异常，编译异常就是必须在代码中try/catch捕获 -->
			<tx:method name="insert*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="delete*" propagation="REQUIRED" rollback-for="Exception"/>
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>
	<!-- 配置切面织入的范围,后边要把事务边界定在service层 -->
	<aop:config proxy-target-class="true">
		<aop:advisor  advice-ref="advice" pointcut="execution(* com.paipaiwang.service.impl.*.*(..))"/>
	</aop:config>
	
	
	
	
	<!-- 配置SessionTemplate，已封装了繁琐的数据操作-->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" >
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>		
	</bean>
	
	
	<!-- 配置 转换器，对于在basePackage设置的包（包括子包）下的接口类，如果在Mapper.xml文件中定义过，
	将被转换成spring的BEAN，在调用 的地方通过@Autowired方式将可以注入接口实例-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<!-- <property name="sqlSessionFactory" ref="sqlSessionFactory"/>
		 配置上面这一行时，会导致properties文件配置无法读取因为MapperScannerConigurer实际是在解析加载bean定义阶段的
		这个时候要是设置sqlSessionFactory的话，会导致提前初始化一些类，这个时候
		，PropertyPlaceholderConfigurer还没来得及替换定义中的变量，导致把表达式当作字符串复制了
		解决方法，删除这一行，同时配置一个以sqlSessionFactory命名的org.mybatis.spring.SqlSessionFactoryBean（上面已经有了）
		另外的方法，把这一夜的name属性改为sqlSessionFactoryBeanName，则不会引发提前初始化问题
		-->
		<property name="basePackage" value="com.paipaiwang.dao"/>
	</bean>

	
	
	
	
	
	
	<!-- 自动扫描组件，要把controller去除，他们是在spring-mvc.xml中配置，如果不去除会影响事务管理。   --> 
	<!-- <context:component-scan base-package="com.paipaiwang">
		<context:exclude-filter type="annotation"	expression="org.springframework.stereotype.Controller" />
	</context:component-scan>	 -->
	<context:component-scan base-package="com.paipaiwang.service.impl"></context:component-scan>
	<!-- <context:component-scan base-package="com.paipaiwang.listener"></context:component-scan> -->
	
	<context:component-scan base-package="com.paipaiwang.listener"></context:component-scan>
	
	<context:component-scan base-package="com.paipaiwang.timertask"></context:component-scan>
	
	<!--开启这个配置，spring才能识别@Scheduled注解   -->
	<task:annotation-driven />
	
</beans>
